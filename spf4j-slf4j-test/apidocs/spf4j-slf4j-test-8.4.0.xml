<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!-- Generated by the JDiff Javadoc doclet -->
<!-- (http://www.jdiff.org) -->
<!-- on Wed Mar 28 11:37:55 EDT 2018 -->

<api
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:noNamespaceSchemaLocation='api.xsd'
  name="spf4j-slf4j-test-8.4.0"
  jdversion="1.0.9">

<!--  Command line arguments =  -doclet jdiff.JDiff -docletpath /Users/zoly/.m2/repository/xml-resolver/xml-resolver/1.2/xml-resolver-1.2.jar:/Users/zoly/.m2/repository/xerces/xercesImpl/2.10.0/xercesImpl-2.10.0.jar:/Users/zoly/.m2/repository/xml-apis/xml-apis/1.4.01/xml-apis-1.4.01.jar:/Users/zoly/.m2/repository/jdiff/jdiff/1.0.9/jdiff-1.0.9.jar -doclet jdiff.JDiff -docletpath /Users/zoly/.m2/repository/xml-resolver/xml-resolver/1.2/xml-resolver-1.2.jar:/Users/zoly/.m2/repository/xerces/xercesImpl/2.10.0/xercesImpl-2.10.0.jar:/Users/zoly/.m2/repository/xml-apis/xml-apis/1.4.01/xml-apis-1.4.01.jar:/Users/zoly/.m2/repository/jdiff/jdiff/1.0.9/jdiff-1.0.9.jar -apiname spf4j-slf4j-test-8.4.0 -apidir /Users/zoly/NetBeansProjects/spf4j/spf4j-slf4j-test/target/site/apidocs -classpath /Users/zoly/.m2/repository/org/slf4j/jul-to-slf4j/1.7.25/jul-to-slf4j-1.7.25.jar:/Users/zoly/.m2/repository/junit/junit/4.12/junit-4.12.jar:/Users/zoly/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:/Users/zoly/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar:/Users/zoly/.m2/repository/com/google/errorprone/error_prone_annotations/2.0.18/error_prone_annotations-2.0.18.jar:/Users/zoly/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/Users/zoly/.m2/repository/com/google/guava/guava/23.3-jre/guava-23.3-jre.jar:/Users/zoly/.m2/repository/org/hamcrest/hamcrest-library/1.3/hamcrest-library-1.3.jar:/Users/zoly/.m2/repository/com/google/code/findbugs/findbugs-annotations/3.0.1/findbugs-annotations-3.0.1.jar:/Users/zoly/.m2/repository/org/spf4j/spf4j-slf4j-test/8.4.0/spf4j-slf4j-test-8.4.0.jar:/Users/zoly/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar:/Users/zoly/.m2/repository/net/sf/trove4j/trove4j/3.0.3/trove4j-3.0.3.jar:/Users/zoly/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar -sourcepath /var/folders/xj/26t4l20j05740l2k5ng_4v3h0000gp/T/jdiff7001677005117265495/spf4j-slf4j-test/8.4.0/sources -->
<package name="org.spf4j.recyclable.impl">
  <!-- start class org.spf4j.recyclable.impl.ArraySuppliers -->
  <class name="ArraySuppliers" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.recyclable.impl.ArraySuppliers -->
  <!-- start class org.spf4j.recyclable.impl.ArraySuppliers.Bytes -->
  <class name="ArraySuppliers.Bytes" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="TL_SUPPLIER" type="org.spf4j.recyclable.SizedRecyclingSupplier"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="GL_SUPPLIER" type="org.spf4j.recyclable.SizedRecyclingSupplier"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="JAVA_NEW" type="org.spf4j.recyclable.SizedRecyclingSupplier"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.recyclable.impl.ArraySuppliers.Bytes -->
  <!-- start class org.spf4j.recyclable.impl.ArraySuppliers.Chars -->
  <class name="ArraySuppliers.Chars" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="TL_SUPPLIER" type="org.spf4j.recyclable.SizedRecyclingSupplier"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="GL_SUPPLIER" type="org.spf4j.recyclable.SizedRecyclingSupplier"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="JAVA_NEW" type="org.spf4j.recyclable.SizedRecyclingSupplier"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.recyclable.impl.ArraySuppliers.Chars -->
  <!-- start class org.spf4j.recyclable.impl.ArraySuppliers.Objects -->
  <class name="ArraySuppliers.Objects" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="TL_SUPPLIER" type="org.spf4j.recyclable.SizedRecyclingSupplier"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.recyclable.impl.ArraySuppliers.Objects -->
  <!-- start class org.spf4j.recyclable.impl.Powerof2SizedGlobalRecyclingSupplier -->
  <class name="Powerof2SizedGlobalRecyclingSupplier" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.recyclable.SizedRecyclingSupplier"/>
    <constructor name="Powerof2SizedGlobalRecyclingSupplier" type="org.spf4j.recyclable.SizedRecyclingSupplier.Factory, org.spf4j.base.ReferenceType"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="size" type="int"/>
    </method>
    <method name="recycle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[recycling supplier that allows you to recycle objects.
 Recycling objects is dangerous business, care should be used.
 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.recyclable.impl.Powerof2SizedGlobalRecyclingSupplier -->
  <!-- start class org.spf4j.recyclable.impl.Powerof2ThreadLocalRecyclingSupplier -->
  <class name="Powerof2ThreadLocalRecyclingSupplier" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.recyclable.SizedRecyclingSupplier"/>
    <constructor name="Powerof2ThreadLocalRecyclingSupplier" type="org.spf4j.recyclable.SizedRecyclingSupplier.Factory, org.spf4j.base.ReferenceType"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="size" type="int"/>
    </method>
    <method name="recycle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[recycling supplier that allows you to recycle objects.
 Recycling objects is dangerous business, care should be used.
 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.recyclable.impl.Powerof2ThreadLocalRecyclingSupplier -->
</package>
<package name="org.spf4j.test.log.junit4">
  <!-- start class org.spf4j.test.log.junit4.DetailOnFailureRunListener -->
  <class name="DetailOnFailureRunListener" extends="org.junit.runner.notification.RunListener"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="DetailOnFailureRunListener"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="testIgnored"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.junit.runner.Description"/>
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <method name="testAssumptionFailure"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="failure" type="org.junit.runner.notification.Failure"/>
    </method>
    <method name="testFailure"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="failure" type="org.junit.runner.notification.Failure"/>
    </method>
    <method name="testFinished"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.junit.runner.Description"/>
    </method>
    <method name="testStarted"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.junit.runner.Description"/>
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <method name="testRunFinished"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="result" type="org.junit.runner.Result"/>
    </method>
    <method name="testRunStarted"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.junit.runner.Description"/>
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.junit4.DetailOnFailureRunListener -->
  <!-- start class org.spf4j.test.log.junit4.Spf4jTestLogJUnitRunner -->
  <class name="Spf4jTestLogJUnitRunner" extends="org.junit.runners.BlockJUnit4ClassRunner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Spf4jTestLogJUnitRunner" type="java.lang.Class"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="InitializationError" type="org.junit.runners.model.InitializationError"/>
    </constructor>
    <method name="run"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notifier" type="org.junit.runner.notification.RunNotifier"/>
      <doc>
      <![CDATA[See JUnit doc if overwriting...
 @param notifier]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.junit4.Spf4jTestLogJUnitRunner -->
  <!-- start class org.spf4j.test.log.junit4.Spf4jTestLogRunListenerSingleton -->
  <class name="Spf4jTestLogRunListenerSingleton" extends="org.junit.runner.notification.RunListener"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getInstance" return="org.spf4j.test.log.junit4.Spf4jTestLogRunListenerSingleton"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="testRunFinished"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="result" type="org.junit.runner.Result"/>
    </method>
    <method name="testFailure"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="failure" type="org.junit.runner.notification.Failure"/>
    </method>
    <method name="testFinished"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.junit.runner.Description"/>
    </method>
    <method name="testStarted"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="description" type="org.junit.runner.Description"/>
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <method name="getUncaughtExceptionHandler" return="org.spf4j.test.log.ExceptionHandoverRegistry"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.junit4.Spf4jTestLogRunListenerSingleton -->
</package>
<package name="org.spf4j.concurrent">
  <!-- start class org.spf4j.concurrent.UnboundedLoadingCache -->
  <class name="UnboundedLoadingCache" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.common.cache.LoadingCache"/>
    <constructor name="UnboundedLoadingCache" type="int, com.google.common.cache.CacheLoader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UnboundedLoadingCache" type="int, int, com.google.common.cache.CacheLoader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="UnboundedLoadingCache" type="java.util.Comparator, com.google.common.cache.CacheLoader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Will use a ConcurrentSkipListMap to store the underlying data.
 @param comparator
 @param loader]]>
      </doc>
    </constructor>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getUnchecked" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
    </method>
    <method name="getAll" return="com.google.common.collect.ImmutableMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keys" type="java.lang.Iterable"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="apply" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
    </method>
    <method name="refresh"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
    </method>
    <method name="asMap" return="java.util.concurrent.ConcurrentMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIfPresent" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
    </method>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
      <param name="valueLoader" type="java.util.concurrent.Callable"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
    </method>
    <method name="getAllPresent" return="com.google.common.collect.ImmutableMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keys" type="java.lang.Iterable"/>
    </method>
    <method name="put"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="putAll"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="m" type="java.util.Map"/>
    </method>
    <method name="invalidate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
    </method>
    <method name="invalidateAll"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keys" type="java.lang.Iterable"/>
    </method>
    <method name="invalidateAll"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="size" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="stats" return="com.google.common.cache.CacheStats"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="cleanUp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getKeysLoaded" return="java.util.Set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[custom build high performance implementation for a unbounded guava cache: UnboundedLoadingCache is implemented with
 JDK concurrent map UnboundedLoadingCache2 is using the JDK 1.8 computing map functionality, but benchmarks show worse
 performance.

 Benchmark Mode Cnt Score Error Units CacheBenchmark.guavaCache thrpt 15 29011674.275 # 710672.413 ops/s
 CacheBenchmark.spf4j2Cache thrpt 15 30567248.015 # 807965.535 ops/s CacheBenchmark.spf4jCache thrpt 15 37961593.882 #
 1136244.254 ops/s CacheBenchmark.spf4jRacyCache thrpt 15 37553655.751 # 855349.501 ops/s

 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.concurrent.UnboundedLoadingCache -->
</package>
<package name="org.spf4j.test.log">
  <!-- start interface org.spf4j.test.log.AllLevelsLogHandler -->
  <interface name="AllLevelsLogHandler"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.test.log.LogHandler"/>
    <method name="handles" return="org.spf4j.test.log.LogHandler.Handling"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="org.spf4j.test.log.Level"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.AllLevelsLogHandler -->
  <!-- start interface org.spf4j.test.log.AsyncObservationAssert -->
  <interface name="AsyncObservationAssert"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="assertObservation"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="timeout" type="long"/>
      <param name="unit" type="java.util.concurrent.TimeUnit"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <doc>
      <![CDATA[Assert the something happens. (messages get logged or not)
 @param timeout will wait up to this this amount of time for the observation to become available.
 @param unit the unit of time.
 @throws java.lang.InterruptedException thi soperation is interruptible.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.AsyncObservationAssert -->
  <!-- start class org.spf4j.test.log.CachedLogConfig -->
  <class name="CachedLogConfig" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.test.log.LogConfig"/>
    <constructor name="CachedLogConfig" type="org.spf4j.test.log.LogConfig"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getLogConsumer" return="org.spf4j.test.log.LogConsumer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="level" type="org.spf4j.test.log.Level"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="add" return="org.spf4j.test.log.CachedLogConfig"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="handler" type="org.spf4j.test.log.LogHandler"/>
    </method>
    <method name="remove" return="org.spf4j.test.log.CachedLogConfig"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="handler" type="org.spf4j.test.log.LogHandler"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.CachedLogConfig -->
  <!-- start interface org.spf4j.test.log.CollectTrobleshootingLogs -->
  <interface name="CollectTrobleshootingLogs"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.annotation.Annotation"/>
    <method name="minLevel" return="org.spf4j.test.log.Level"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="collectPrinted" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.CollectTrobleshootingLogs -->
  <!-- start interface org.spf4j.test.log.ExceptionHandoverRegistry -->
  <interface name="ExceptionHandoverRegistry"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="add"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="handover" type="org.spf4j.test.log.UncaughtExceptionConsumer"/>
    </method>
    <method name="remove"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="handover" type="org.spf4j.test.log.UncaughtExceptionConsumer"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.ExceptionHandoverRegistry -->
  <!-- start interface org.spf4j.test.log.HandlerRegistration -->
  <interface name="HandlerRegistration"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.AutoCloseable"/>
    <method name="close"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.HandlerRegistration -->
  <!-- start class org.spf4j.test.log.Level -->
  <class name="Level" extends="java.lang.Enum"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.spf4j.test.log.Level[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.spf4j.test.log.Level"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="TRACE" type="org.spf4j.test.log.Level"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DEBUG" type="org.spf4j.test.log.Level"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="INFO" type="org.spf4j.test.log.Level"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="WARN" type="org.spf4j.test.log.Level"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ERROR" type="org.spf4j.test.log.Level"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="OFF" type="org.spf4j.test.log.Level"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.Level -->
  <!-- start interface org.spf4j.test.log.LogAssert -->
  <interface name="LogAssert"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="assertObservation"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Assert that a sequence of messages has not been seen.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.LogAssert -->
  <!-- start interface org.spf4j.test.log.LogCollection -->
  <interface name="LogCollection"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.test.log.HandlerRegistration"/>
    <implements name="java.util.function.Supplier"/>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.LogCollection -->
  <!-- start interface org.spf4j.test.log.LogConfig -->
  <interface name="LogConfig"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getLogConsumer" return="org.spf4j.test.log.LogConsumer"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="level" type="org.spf4j.test.log.Level"/>
    </method>
    <method name="add" return="org.spf4j.test.log.LogConfig"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="handler" type="org.spf4j.test.log.LogHandler"/>
    </method>
    <method name="remove" return="org.spf4j.test.log.LogConfig"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="handler" type="org.spf4j.test.log.LogHandler"/>
    </method>
    <method name="minRootLevel" return="org.spf4j.test.log.Level"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.LogConfig -->
  <!-- start interface org.spf4j.test.log.LogConsumer -->
  <interface name="LogConsumer"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.function.Consumer"/>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.LogConsumer -->
  <!-- start interface org.spf4j.test.log.LogHandler -->
  <interface name="LogHandler"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="handles" return="org.spf4j.test.log.LogHandler.Handling"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="org.spf4j.test.log.Level"/>
      <doc>
      <![CDATA[find out if this handler should be used for the given log level.
 @param level the log level.
 @return Handling enum that, specifies what this handler does with these messages.]]>
      </doc>
    </method>
    <method name="handle" return="org.spf4j.test.log.LogRecord"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="record" type="org.spf4j.test.log.LogRecord"/>
      <doc>
      <![CDATA[Handler handling method
 @param record the log record.
 @return return the log message potentially with an attachment,
 or null if the handler does not want to pass the message downstream.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.LogHandler -->
  <!-- start class org.spf4j.test.log.LogHandler.Handling -->
  <class name="LogHandler.Handling" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.spf4j.test.log.LogHandler.Handling[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.spf4j.test.log.LogHandler.Handling"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="HANDLE_PASS" type="org.spf4j.test.log.LogHandler.Handling"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="HANDLE_CONSUME" type="org.spf4j.test.log.LogHandler.Handling"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Will handle this message, and will consume it.]]>
      </doc>
    </field>
    <field name="NONE" type="org.spf4j.test.log.LogHandler.Handling"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Not handling these massages]]>
      </doc>
    </field>
  </class>
  <!-- end class org.spf4j.test.log.LogHandler.Handling -->
  <!-- start class org.spf4j.test.log.LogMatchers -->
  <class name="LogMatchers" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="hasMatchingFormat" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tMatcher" type="org.hamcrest.Matcher"/>
    </method>
    <method name="hasFormat" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
    </method>
    <method name="hasMatchingMarker" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tMatcher" type="org.hamcrest.Matcher"/>
    </method>
    <method name="hasMarker" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
    </method>
    <method name="hasMatchingMessage" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tMatcher" type="org.hamcrest.Matcher"/>
    </method>
    <method name="hasMessage" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="java.lang.String"/>
    </method>
    <method name="hasLevel" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="org.spf4j.test.log.Level"/>
    </method>
    <method name="hasMatchingArguments" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="matcher" type="org.hamcrest.Matcher"/>
    </method>
    <method name="hasMatchingExtraArguments" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="matcher" type="org.hamcrest.Matcher"/>
    </method>
    <method name="hasMatchingExtraThrowable" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="matcher" type="org.hamcrest.Matcher"/>
    </method>
    <method name="hasMatchingExtraThrowableChain" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="matcher" type="org.hamcrest.Matcher"/>
    </method>
    <doc>
    <![CDATA[Utility class to create LogRecord matchers.
 @author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.LogMatchers -->
  <!-- start class org.spf4j.test.log.LogPrinter -->
  <class name="LogPrinter" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.test.log.LogHandler"/>
    <method name="getAppenderSupplier" return="org.spf4j.io.ConfigurableAppenderSupplier"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="handles" return="org.spf4j.test.log.LogHandler.Handling"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="org.spf4j.test.log.Level"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="handle" return="org.spf4j.test.log.LogRecord"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="record" type="org.spf4j.test.log.LogRecord"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="printTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stream" type="java.io.PrintStream"/>
      <param name="record" type="org.spf4j.test.log.LogRecord"/>
      <param name="annotate" type="java.lang.String"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.LogPrinter -->
  <!-- start class org.spf4j.test.log.LogRecord -->
  <class name="LogRecord" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="LogRecord" type="org.slf4j.Logger, org.spf4j.test.log.Level, java.lang.String, java.lang.Object[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="LogRecord" type="org.slf4j.Logger, org.spf4j.test.log.Level, org.slf4j.Marker, java.lang.String, java.lang.Object[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getLogger" return="org.slf4j.Logger"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLevel" return="org.spf4j.test.log.Level"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getTimeStamp" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMarker" return="org.slf4j.Marker"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFormat" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getArguments" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getThread" return="java.lang.Thread"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="materializeMessage"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getExtraArguments" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getExtraThrowable" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getExtraThrowableChain" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="attach"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="hasAttachment" return="boolean"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.LogRecord -->
  <!-- start class org.spf4j.test.log.TestLogger -->
  <class name="TestLogger" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.slf4j.Logger"/>
    <constructor name="TestLogger" type="java.lang.String, java.util.function.Supplier"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="log"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="level" type="org.spf4j.test.log.Level"/>
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
      <param name="args" type="java.lang.Object[]"/>
    </method>
    <method name="isTraceEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isTraceEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="argArray" type="java.lang.Object[]"/>
    </method>
    <method name="trace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isDebugEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isDebugEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="debug"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isInfoEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isInfoEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="info"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isWarnEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isWarnEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="warn"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isErrorEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="isErrorEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg" type="java.lang.Object"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arg1" type="java.lang.Object"/>
      <param name="arg2" type="java.lang.Object"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="format" type="java.lang.String"/>
      <param name="arguments" type="java.lang.Object[]"/>
    </method>
    <method name="error"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marker" type="org.slf4j.Marker"/>
      <param name="msg" type="java.lang.String"/>
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.TestLogger -->
  <!-- start class org.spf4j.test.log.TestLoggers -->
  <class name="TestLoggers" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.slf4j.ILoggerFactory"/>
    <method name="sys" return="org.spf4j.test.log.TestLoggers"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getConfig" return="org.spf4j.test.log.LogConfig"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="print" return="org.spf4j.test.log.HandlerRegistration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="level" type="org.spf4j.test.log.Level"/>
      <doc>
      <![CDATA[Print logs above a category and log level.

 @param category the log category.
 @param level the log level.
 @return a handler that allows this printing to stop (when calling close).]]>
      </doc>
    </method>
    <method name="intercept" return="org.spf4j.test.log.HandlerRegistration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="handler" type="org.spf4j.test.log.LogHandler"/>
      <doc>
      <![CDATA[Ability to intercept log messages logged under a category

 @param category the logger category name (a.b.c)
 @param handler the log handler to register.
 @return a registration handle, that you can use to unregister.]]>
      </doc>
    </method>
    <method name="collect" return="org.spf4j.test.log.LogCollection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="fromLevel" type="org.spf4j.test.log.Level"/>
      <param name="passThrough" type="boolean"/>
      <param name="collector" type="java.util.stream.Collector"/>
      <doc>
      <![CDATA[Collect a bunch of logs.
 @param <T> the type of object to collect into.
 @param category the log category (a.b.c)
 @param fromLevel from level to collect.
 @param passThrough pass the logs to lower category handlers or not.
 @param collector the collector to collect the logs.
 @return collected logs.]]>
      </doc>
    </method>
    <method name="collect" return="org.spf4j.test.log.LogCollection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="fromLevel" type="org.spf4j.test.log.Level"/>
      <param name="toLevel" type="org.spf4j.test.log.Level"/>
      <param name="passThrough" type="boolean"/>
      <param name="collector" type="java.util.stream.Collector"/>
      <doc>
      <![CDATA[Collect a bunch of logs.
 @param <T> the type of object to collect into.
 @param category the log category (a.b.c)
 @param fromLevel from level to collect.
 @param toLevel to level to collect.
 @param passThrough pass the logs to lower category handlers or not.
 @param collector the collector to collect the logs.
 @return collected logs.]]>
      </doc>
    </method>
    <method name="interceptAllLevels" return="org.spf4j.test.log.HandlerRegistration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="handler" type="org.spf4j.test.log.AllLevelsLogHandler"/>
      <doc>
      <![CDATA[Convenience method for functional use.

 @param category the log category.
 @param handler a functional handler.
 @return a registration handle to allow you to undo the registration.]]>
      </doc>
    </method>
    <method name="ignore" return="org.spf4j.test.log.HandlerRegistration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="from" type="org.spf4j.test.log.Level"/>
      <param name="to" type="org.spf4j.test.log.Level"/>
      <doc>
      <![CDATA[all logs from category and specified levels will be ignored... (unless there are more specific handlers)
 @param category the log category.
 @param from from log level.
 @param to to log level.
 @return a registration handle to allow you to undo this filtering.]]>
      </doc>
    </method>
    <method name="expect" return="org.spf4j.test.log.LogAssert"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="minimumLogLevel" type="org.spf4j.test.log.Level"/>
      <param name="matchers" type="org.hamcrest.Matcher[]"/>
      <doc>
      <![CDATA[Create an log expectation that can be asserted like:
 <code>
 LogAssert expect = TestLoggers.expect("org.spf4j.test", Level.ERROR, Matchers.hasProperty("format",
 Matchers.equalTo("Booo")));
 LOG.error("Booo", new RuntimeException());
 expect.assertObservation();
 </code>
 @param category the category under which we should expect these messages.
 @param minimumLogLevel minimum log level of expected log messages
 @param matchers a succession of LogMessages with each matching a Matcher is expected.
 @return an assertion handle.]]>
      </doc>
    </method>
    <method name="dontExpect" return="org.spf4j.test.log.LogAssert"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="minimumLogLevel" type="org.spf4j.test.log.Level"/>
      <param name="matchers" type="org.hamcrest.Matcher[]"/>
      <doc>
      <![CDATA[the opposite of expect.
 @param category the category under which we should expect these messages.
 @param minimumLogLevel minimum log level of expected log messages
 @param matchers a succession of LogMessages with each matching a Matcher is NOT expected.
 @return an assertion handle.]]>
      </doc>
    </method>
    <method name="expect" return="org.spf4j.test.log.LogAssert"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="category" type="java.lang.String"/>
      <param name="minimumLogLevel" type="org.spf4j.test.log.Level"/>
      <param name="nrTimes" type="int"/>
      <param name="matchers" type="org.hamcrest.Matcher[]"/>
      <doc>
      <![CDATA[Ability to assert is you expect a sequence of logs to be repeated.

 @param category the log category (a.b.c)
 @param minimumLogLevel the minimum log level of expected messages.
 @param nrTimes number of time the sequence should appear.
 @param matchers the sequence of matchers.
 @return the assertion handle.]]>
      </doc>
    </method>
    <method name="expectUncaughtException" return="org.spf4j.test.log.AsyncObservationAssert"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="matcher" type="org.hamcrest.Matcher"/>
      <doc>
      <![CDATA[Assert uncaught exceptions. (from threads)
 @param matcher the exception matcher.
 @return the assertion handle.]]>
      </doc>
    </method>
    <method name="collect" return="org.spf4j.test.log.LogCollection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="minimumLogLevel" type="org.spf4j.test.log.Level"/>
      <param name="maxNrLogs" type="int"/>
      <param name="collectPrinted" type="boolean"/>
      <doc>
      <![CDATA[Collect up to a number of log messages.
 @param minimumLogLevel the minimum log level of the messages.
 @param maxNrLogs the max number of messages to collect.
 @param collectPrinted collect messages that have been printed or not.
 @return the collection of messages.]]>
      </doc>
    </method>
    <method name="getLogger" return="org.slf4j.Logger"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Return an appropriate {@link SimpleLogger} instance by name.]]>
      </doc>
    </method>
    <method name="getJulGlobal" return="java.util.logging.Logger"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getJulRoot" return="java.util.logging.Logger"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.TestLoggers -->
  <!-- start class org.spf4j.test.log.TestUtils -->
  <class name="TestUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="isExecutedFromNetbeans" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isExecutedFromIDE" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Supporting netbeans only at this time.
 For other IDEs you need to configure them to pass the spf4j.execFromIDE property.
 @return]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.TestUtils -->
  <!-- start interface org.spf4j.test.log.UncaughtExceptionConsumer -->
  <interface name="UncaughtExceptionConsumer"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="offer" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="exDetail" type="org.spf4j.test.log.UncaughtExceptionDetail"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.test.log.UncaughtExceptionConsumer -->
  <!-- start class org.spf4j.test.log.UncaughtExceptionDetail -->
  <class name="UncaughtExceptionDetail" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="UncaughtExceptionDetail" type="java.lang.Thread, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getThread" return="java.lang.Thread"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getThrowable" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasThrowable" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tMatcher" type="org.hamcrest.Matcher"/>
    </method>
    <method name="hasThread" return="org.hamcrest.Matcher"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tMatcher" type="org.hamcrest.Matcher"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.test.log.UncaughtExceptionDetail -->
</package>
<package name="org.spf4j.base">
  <!-- start class org.spf4j.base.AggregateTranslator -->
  <class name="AggregateTranslator" extends="org.spf4j.base.CharSequenceTranslator"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="AggregateTranslator" type="org.spf4j.base.CharSequenceTranslator[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="translate" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="java.lang.CharSequence"/>
      <param name="index" type="int"/>
      <param name="out" type="java.io.Writer"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.base.AggregateTranslator -->
  <!-- start class org.spf4j.base.AppendableUtils -->
  <class name="AppendableUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="escapeJsonString"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="toEscape" type="java.lang.CharSequence"/>
      <param name="jsonString" type="java.lang.StringBuilder"/>
      <doc>
      <![CDATA[Utility method to escape java strings to json strings.

 @param toEscape - the java string to escape.
 @param jsonString - the destination json String builder.]]>
      </doc>
    </method>
    <method name="escapeJsonString"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="toEscape" type="java.lang.CharSequence"/>
      <param name="jsonString" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="appendJsonStringEscapedChar"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="char"/>
      <param name="jsonString" type="java.lang.StringBuilder"/>
    </method>
    <method name="appendJsonStringEscapedChar"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="char"/>
      <param name="jsonString" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="appendUnsignedStringPadded"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sb" type="java.lang.StringBuilder"/>
      <param name="nr" type="int"/>
      <param name="shift" type="int"/>
      <param name="padTo" type="int"/>
    </method>
    <method name="appendUnsignedStringPadded"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sb" type="java.lang.Appendable"/>
      <param name="nr" type="int"/>
      <param name="shift" type="int"/>
      <param name="padTo" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="appendUnsignedString"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sb" type="java.lang.StringBuilder"/>
      <param name="nr" type="long"/>
      <param name="shift" type="int"/>
    </method>
    <method name="appendUnsignedString"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sb" type="java.lang.StringBuilder"/>
      <param name="nr" type="int"/>
      <param name="shift" type="int"/>
    </method>
    <method name="appendSpaces"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.lang.Appendable"/>
      <param name="nrSpaces" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="appendSpaces"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.lang.StringBuilder"/>
      <param name="nrSpaces" type="int"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.AppendableUtils -->
  <!-- start class org.spf4j.base.Arrays -->
  <class name="Arrays" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getColumnAsDoubles" return="double[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="data" type="long[][]"/>
      <param name="columnNumber" type="int"/>
    </method>
    <method name="getColumn" return="double[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="data" type="double[][]"/>
      <param name="columnNumber" type="int"/>
    </method>
    <method name="toDoubleArray" return="double[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="larr" type="long[]"/>
    </method>
    <method name="toObjectArray" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="larr" type="long[]"/>
    </method>
    <method name="divide" return="double[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="arr1" type="double[]"/>
      <param name="arr2" type="double[]"/>
    </method>
    <method name="deepEquals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="a1" type="java.lang.Object[]"/>
      <param name="a2" type="java.lang.Object[]"/>
      <param name="starting" type="int"/>
    </method>
    <method name="deepEquals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="a1" type="java.lang.Object[]"/>
      <param name="a2" type="java.lang.Object[]"/>
      <param name="starting" type="int"/>
      <param name="ending" type="int"/>
    </method>
    <method name="search" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="char[]"/>
      <param name="c" type="char"/>
    </method>
    <method name="moveOfRange" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="original" type="java.lang.Object[]"/>
      <param name="from" type="int"/>
      <param name="to" type="int"/>
    </method>
    <method name="concat" return="java.lang.Object[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="arrays" type="java.lang.Object[][]"/>
    </method>
    <method name="indexOf" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="java.lang.Object[]"/>
      <param name="content" type="java.lang.Object"/>
    </method>
    <method name="fill"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="byte[]"/>
      <param name="startIdx" type="int"/>
      <param name="endIdx" type="int"/>
      <param name="value" type="byte"/>
      <doc>
      <![CDATA[implementation which significantly faster for large arrays (> 500).]]>
      </doc>
    </method>
    <method name="fill"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="java.lang.Object[]"/>
      <param name="startIdx" type="int"/>
      <param name="endIdx" type="int"/>
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[implementation which is significantly faster for large arrays (> 500).
 Bechmark results:
 Benchmark                                      Mode Cnt Score            Error           Units
 ArraysBenchmark.testSpf4jFillSmall(10)         thrpt 10 1048892782.375   # 29976629.818  ops/s
 ArraysBenchmark.testjdkFillSmall(10)           thrpt 10 1046330835.509   # 47577260.717  ops/s
 ArraysBenchmark.testSpf4jFillMedium(100)       thrpt 10 123724912.161    # 4049077.779   ops/s
 ArraysBenchmark.testjdkFillMedium(100)         thrpt 10 124143139.498    # 2044760.427   ops/s
 ArraysBenchmark.testSpf4jFillLarge(1000)       thrpt 10 20335282.192     # 592359.181    ops/s
 ArraysBenchmark.testjdkFillLarge(1000)         thrpt 10 12661975.522     # 170457.046    ops/s
 ArraysBenchmark.testSpf4jFillVeryLarge(10000)  thrpt 10 2767351.098      # 74871.147     ops/s
 ArraysBenchmark.testjdkFillVeryLarge(10000     thrpt 10 1045099.669      # 30044.505     ops/s]]>
      </doc>
    </method>
    <method name="fill"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="char[]"/>
      <param name="startIdx" type="int"/>
      <param name="endIdx" type="int"/>
      <param name="value" type="char"/>
    </method>
    <method name="fill"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="int[]"/>
      <param name="startIdx" type="int"/>
      <param name="endIdx" type="int"/>
      <param name="value" type="int"/>
    </method>
    <method name="fill"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="long[]"/>
      <param name="startIdx" type="int"/>
      <param name="endIdx" type="int"/>
      <param name="value" type="long"/>
    </method>
    <method name="fill"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="double[]"/>
      <param name="startIdx" type="int"/>
      <param name="endIdx" type="int"/>
      <param name="value" type="double"/>
    </method>
    <field name="EMPTY_OBJ_ARRAY" type="java.lang.Object[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EMPTY_STRING_ARRAY" type="java.lang.String[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EMPTY_BYTE_ARRAY" type="byte[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EMPTY_LONG_ARRAY" type="long[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EMPTY_INT_ARRAY" type="int[]"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Array utilities.

 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Arrays -->
  <!-- start class org.spf4j.base.CharSequences -->
  <class name="CharSequences" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="distance" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s1" type="java.lang.CharSequence"/>
      <param name="s2" type="java.lang.CharSequence"/>
      <doc>
      <![CDATA[function that calculates the number of operations that are needed to transform s1 into s2. operations are: char
 add, char delete, char modify

 @param s1
 @param s2
 @return the number of operations required to transfor s1 into s2]]>
      </doc>
    </method>
    <method name="distance" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c1" type="char"/>
      <param name="c2" type="char"/>
    </method>
    <method name="compareTo" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="use compare.">
      <param name="s" type="java.lang.CharSequence"/>
      <param name="t" type="java.lang.CharSequence"/>
      <doc>
      <![CDATA[compare s to t.

 @param s
 @param t
 @return
 @deprecated use compare.]]>
      </doc>
    </method>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.CharSequence"/>
      <param name="t" type="java.lang.CharSequence"/>
    </method>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.CharSequence"/>
      <param name="sLength" type="int"/>
      <param name="t" type="java.lang.CharSequence"/>
      <param name="tLength" type="int"/>
    </method>
    <method name="compare" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.CharSequence"/>
      <param name="sFrom" type="int"/>
      <param name="sLength" type="int"/>
      <param name="t" type="java.lang.CharSequence"/>
      <param name="tFrom" type="int"/>
      <param name="tLength" type="int"/>
      <doc>
      <![CDATA[compare 2 CharSequence fragments.

 @param s the charsequence to compare
 @param sFrom the index for the first chars to compare.
 @param sLength the number of characters to compare.
 @param t the charsequence to compare to
 @param tFrom the index for the first character to compare to.
 @param tLength the number of characters to compare to.
 @return]]>
      </doc>
    </method>
    <method name="equalsNullables" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.CharSequence"/>
      <param name="t" type="java.lang.CharSequence"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.CharSequence"/>
      <param name="t" type="java.lang.CharSequence"/>
    </method>
    <method name="hashcode" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cs" type="java.lang.CharSequence"/>
    </method>
    <method name="subSequence" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="seq" type="java.lang.CharSequence"/>
      <param name="startIdx" type="int"/>
      <param name="endIdx" type="int"/>
    </method>
    <method name="endsWith" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="qc" type="java.lang.CharSequence"/>
      <param name="with" type="java.lang.CharSequence"/>
    </method>
    <method name="lineNumbered" return="java.lang.Appendable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="startLineNr" type="int"/>
      <param name="appendable" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="lineNumbered" return="java.lang.Appendable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="startLineNr" type="int"/>
      <param name="appendable" type="java.lang.Appendable"/>
      <param name="ia" type="org.spf4j.base.IntAppender"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toLineNumbered" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="startLineNr" type="int"/>
      <param name="source" type="java.lang.CharSequence"/>
    </method>
    <method name="toLineNumbered" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="startLineNr" type="int"/>
      <param name="source" type="java.lang.CharSequence"/>
      <param name="ia" type="org.spf4j.base.IntAppender"/>
    </method>
    <method name="parseInt" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.CharSequence"/>
      <doc>
      <![CDATA[A more flexible version of Integer.parseInt.

 @see java.lang.Integer.parseInt]]>
      </doc>
    </method>
    <method name="parseInt" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cs" type="java.lang.CharSequence"/>
      <param name="radix" type="int"/>
      <doc>
      <![CDATA[A more flexible version of Integer.parseInt.

 @see java.lang.Integer.parseInt]]>
      </doc>
    </method>
    <method name="parseLong" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cs" type="java.lang.CharSequence"/>
      <doc>
      <![CDATA[A more flexible version of Long.parseLong.

 @see java.lang.Long.parseLong]]>
      </doc>
    </method>
    <method name="parseLong" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cs" type="java.lang.CharSequence"/>
      <param name="radix" type="int"/>
      <doc>
      <![CDATA[A more flexible version of Long.parseLong.

 @see java.lang.Long.parseLong]]>
      </doc>
    </method>
    <method name="containsAnyChar" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.CharSequence"/>
      <param name="chars" type="char[]"/>
    </method>
    <method name="isValidFileName" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.CharSequence"/>
    </method>
    <method name="validatedFileName" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.CharSequence"/>
    </method>
    <method name="regionMatches" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.CharSequence"/>
      <param name="toffset" type="int"/>
      <param name="other" type="java.lang.CharSequence"/>
      <param name="ooffset" type="int"/>
      <param name="plen" type="int"/>
      <doc>
      <![CDATA[Equivalent to String.regionMatches.]]>
      </doc>
    </method>
    <method name="regionMatchesIgnoreCase" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ta" type="java.lang.CharSequence"/>
      <param name="toffset" type="int"/>
      <param name="pa" type="java.lang.CharSequence"/>
      <param name="ooffset" type="int"/>
      <param name="plen" type="int"/>
      <doc>
      <![CDATA[Equivalent/based on to String.regionMatches.]]>
      </doc>
    </method>
    <method name="match" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="wildcard" type="java.lang.CharSequence"/>
      <param name="cs2Match" type="java.lang.CharSequence"/>
      <doc>
      <![CDATA[regular wildcard matcher.
 * matches any number of consecutive characters.
 ? matches any single character.
 @param wildcard
 @param cs2Match
 @return]]>
      </doc>
    </method>
    <method name="getJavaRegexpStr" return="java.lang.CharSequence"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="wildcard" type="java.lang.CharSequence"/>
      <doc>
      <![CDATA[Transform a wildcard expression 2 a java regular expression.
 * matches any number of consecutive characters.
 ? matches any single character.
 @param wildcard
 @return]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Special methods to use for character sequences...

 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.CharSequences -->
  <!-- start class org.spf4j.base.CharSequenceTranslator -->
  <class name="CharSequenceTranslator" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CharSequenceTranslator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="translate" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="java.lang.CharSequence"/>
      <param name="index" type="int"/>
      <param name="out" type="java.io.Writer"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="translate" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="java.lang.CharSequence"/>
    </method>
    <method name="translate"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="java.lang.CharSequence"/>
      <param name="out" type="java.io.Writer"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="hex" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="codepoint" type="int"/>
      <doc>
      <![CDATA[<p>Returns an upper case hexadecimal <code>String</code> for the given
 character.</p>

 @param codepoint The codepoint to convert.
 @return An upper case hexadecimal <code>String</code>]]>
      </doc>
    </method>
  </class>
  <!-- end class org.spf4j.base.CharSequenceTranslator -->
  <!-- start class org.spf4j.base.CloneFailedException -->
  <class name="CloneFailedException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CloneFailedException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CloneFailedException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CloneFailedException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CloneFailedException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.CloneFailedException -->
  <!-- start class org.spf4j.base.EscapeJsonStringAppendableWrapper -->
  <class name="EscapeJsonStringAppendableWrapper" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Appendable"/>
    <constructor name="EscapeJsonStringAppendableWrapper" type="java.lang.Appendable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="append" return="java.lang.Appendable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="csq" type="java.lang.CharSequence"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="append" return="java.lang.Appendable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="csq" type="java.lang.CharSequence"/>
      <param name="start" type="int"/>
      <param name="end" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="append" return="java.lang.Appendable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="char"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.EscapeJsonStringAppendableWrapper -->
  <!-- start interface org.spf4j.base.IntAppender -->
  <interface name="IntAppender"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="append"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="number" type="int"/>
      <param name="appendTo" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.base.IntAppender -->
  <!-- start class org.spf4j.base.IntAppender.CommentNumberAppender -->
  <class name="IntAppender.CommentNumberAppender" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.base.IntAppender"/>
    <method name="append"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="number" type="int"/>
      <param name="appendTo" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="INSTANCE" type="org.spf4j.base.IntAppender.CommentNumberAppender"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.base.IntAppender.CommentNumberAppender -->
  <!-- start class org.spf4j.base.IntAppender.SimplePrefixNumberAppender -->
  <class name="IntAppender.SimplePrefixNumberAppender" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.base.IntAppender"/>
    <method name="append"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="number" type="int"/>
      <param name="appendTo" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="INSTANCE" type="org.spf4j.base.IntAppender.SimplePrefixNumberAppender"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.base.IntAppender.SimplePrefixNumberAppender -->
  <!-- start class org.spf4j.base.IntMath -->
  <class name="IntMath" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="closestPowerOf2" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="number" type="int"/>
    </method>
    <method name="closestPowerOf2Number" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="number" type="int"/>
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.IntMath -->
  <!-- start class org.spf4j.base.IntMath.XorShift128 -->
  <class name="IntMath.XorShift128" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.base.IntSequence"/>
    <constructor name="XorShift128"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="nextInt" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.base.IntMath.XorShift128 -->
  <!-- start class org.spf4j.base.IntMath.XorShift32 -->
  <class name="IntMath.XorShift32" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.base.IntSequence"/>
    <constructor name="XorShift32"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="nextInt" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A very fast Pseudo random generator.
 use of this random is appropriate when you need the fastest random that you plan to use in a single
 thread.
 If you need a thread-safe random, please use JDK ThreadLocalRandom, which will be your best option.]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.IntMath.XorShift32 -->
  <!-- start class org.spf4j.base.IntMath.XorShift32ThreadSafe -->
  <class name="IntMath.XorShift32ThreadSafe" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="please use JDK java.util.concurrent.ThreadLocalRandom instead.
 The JDK implementation uses local fields in the Thread class instead of a classic ThreadLocal,
 which makes it faster...">
    <implements name="org.spf4j.base.IntSequence"/>
    <constructor name="XorShift32ThreadSafe"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="nextInt" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@deprecated please use JDK java.util.concurrent.ThreadLocalRandom instead.
 The JDK implementation uses local fields in the Thread class instead of a classic ThreadLocal,
 which makes it faster...]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.IntMath.XorShift32ThreadSafe -->
  <!-- start class org.spf4j.base.IntMath.XorShift32ThreadSafe.Singleton -->
  <class name="IntMath.XorShift32ThreadSafe.Singleton" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Singleton"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="INSTANCE" type="org.spf4j.base.IntMath.XorShift32ThreadSafe"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
  </class>
  <!-- end class org.spf4j.base.IntMath.XorShift32ThreadSafe.Singleton -->
  <!-- start interface org.spf4j.base.IntSequence -->
  <interface name="IntSequence"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="nextInt" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.base.IntSequence -->
  <!-- start class org.spf4j.base.LookupTranslator -->
  <class name="LookupTranslator" extends="org.spf4j.base.CharSequenceTranslator"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="LookupTranslator" type="java.lang.CharSequence[][]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="translate" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="java.lang.CharSequence"/>
      <param name="index" type="int"/>
      <param name="out" type="java.io.Writer"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[Translates a value using a lookup table.

 @since 3.0
 @version $Id$]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.LookupTranslator -->
  <!-- start class org.spf4j.base.MemorizedCallable -->
  <class name="MemorizedCallable" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.concurrent.Callable"/>
    <constructor name="MemorizedCallable" type="java.util.concurrent.Callable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="call" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.MemorizedCallable -->
  <!-- start class org.spf4j.base.Objects -->
  <class name="Objects" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="clone" return="java.io.Serializable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.io.Serializable"/>
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Objects -->
  <!-- start class org.spf4j.base.OctalUnescaper -->
  <class name="OctalUnescaper" extends="org.spf4j.base.CharSequenceTranslator"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="OctalUnescaper"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="translate" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="java.lang.CharSequence"/>
      <param name="index" type="int"/>
      <param name="out" type="java.io.Writer"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
  </class>
  <!-- end class org.spf4j.base.OctalUnescaper -->
  <!-- start class org.spf4j.base.PackageInfo -->
  <class name="PackageInfo" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="PackageInfo" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getVersion" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="hasInfo" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPackageInfoDirect" return="org.spf4j.base.PackageInfo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="className" type="java.lang.String"/>
    </method>
    <method name="getPackageInfoDirect" return="org.spf4j.base.PackageInfo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="aClass" type="java.lang.Class"/>
    </method>
    <method name="getPackageInfo" return="org.spf4j.base.PackageInfo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="className" type="java.lang.String"/>
    </method>
    <method name="getJarSourceUrl" return="java.net.URL"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clasz" type="java.lang.Class"/>
      <doc>
      <![CDATA[Useful to get the jar URL where a particular class is located.

 @param clasz
 @return]]>
      </doc>
    </method>
    <field name="NONE" type="org.spf4j.base.PackageInfo"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.PackageInfo -->
  <!-- start class org.spf4j.base.ReferenceType -->
  <class name="ReferenceType" extends="java.lang.Enum"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.spf4j.base.ReferenceType[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.spf4j.base.ReferenceType"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="create" return="java.lang.ref.Reference"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <field name="WEAK" type="org.spf4j.base.ReferenceType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SOFT" type="org.spf4j.base.ReferenceType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.ReferenceType -->
  <!-- start class org.spf4j.base.Slf4jMessageFormatter -->
  <class name="Slf4jMessageFormatter" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="exHandle"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
      <param name="sbuf" type="java.lang.Appendable"/>
      <param name="t" type="java.lang.Throwable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="format" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.lang.Appendable"/>
      <param name="messagePattern" type="java.lang.String"/>
      <param name="argArray" type="java.lang.Object[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Slf4j message formatter.

 @param to Appendable to put formatted message to.
 @param messagePattern see org.slf4j.helpers.MessageFormatter for format.
 @param argArray the message arguments.
 @return the number of arguments used in the message.
 @throws IOException]]>
      </doc>
    </method>
    <method name="format" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.lang.Appendable"/>
      <param name="appSupplier" type="org.spf4j.io.ObjectAppenderSupplier"/>
      <param name="messagePattern" type="java.lang.String"/>
      <param name="argArray" type="java.lang.Object[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Slf4j message formatter.

 @param to Appendable to put formatted message to.
 @param appSupplier a supplier that will provide the serialization method for a particular argument type.
 @param messagePattern see org.slf4j.helpers.MessageFormatter for format.
 @param argArray the message arguments.
 @return the number of arguments used in the message.
 @throws IOException]]>
      </doc>
    </method>
    <method name="format" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.lang.Appendable"/>
      <param name="messagePattern" type="java.lang.String"/>
      <param name="appSupplier" type="org.spf4j.io.ObjectAppenderSupplier"/>
      <param name="argArray" type="java.lang.Object[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[slf4j message formatter.

 @param to Appendable to put formatted message to.
 @param messagePattern see org.slf4j.helpers.MessageFormatter for format.
 @param appSupplier a supplier that will provide the serialization method for a particular argument type.
 @param argArray the message arguments.
 @return the number of arguments used in the message.
 @throws IOException something wend wrong while writing to the appendable.]]>
      </doc>
    </method>
    <method name="format" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="firstArgIdx" type="int"/>
      <param name="to" type="java.lang.Appendable"/>
      <param name="messagePattern" type="java.lang.String"/>
      <param name="appSupplier" type="org.spf4j.io.ObjectAppenderSupplier"/>
      <param name="argArray" type="java.lang.Object[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Slf4j message formatter.

 @param to Appendable to put formatted message to.
 @param messagePattern see org.slf4j.helpers.MessageFormatter for format.
 @param appSupplier a supplier that will provide the serialization method for a particular argument type.
 @param firstArgIdx the index of the first parameter.
 @param argArray the message arguments.
 @return the index of the last arguments used in the message + 1.
 @throws IOException something wend wrong while writing to the appendable.]]>
      </doc>
    </method>
    <method name="format" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="exHandler" type="org.spf4j.base.Slf4jMessageFormatter.ErrorHandler"/>
      <param name="firstArgIdx" type="int"/>
      <param name="to" type="java.lang.Appendable"/>
      <param name="messagePattern" type="java.lang.String"/>
      <param name="appSupplier" type="org.spf4j.io.ObjectAppenderSupplier"/>
      <param name="argArray" type="java.lang.Object[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Slf4j message formatter.

 @param safe - if true recoverable exHandle will be caught when writing arguments, and a error will be appended
 instead.
 @param to Appendable to put formatted message to.
 @param messagePattern see org.slf4j.helpers.MessageFormatter for format.
 @param appSupplier a supplier that will provide the serialization method for a particular argument type.
 @param firstArgIdx the index of the first parameter.
 @param argArray the message arguments.
 @return the index of the last arguments used in the message + 1.
 @throws IOException something wend wrong while writing to the appendable.]]>
      </doc>
    </method>
    <method name="safeObjectAppend"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="exHandler" type="org.spf4j.base.Slf4jMessageFormatter.ErrorHandler"/>
      <param name="sbuf" type="java.lang.Appendable"/>
      <param name="obj" type="java.lang.Object"/>
      <param name="appSupplier" type="org.spf4j.io.ObjectAppenderSupplier"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[A more flexible implementation of the SLF4j message formatter (org.slf4j.helpers.MessageFormatter). the following
 improvements:

 1) Allow to format to a procvided destination (Appendable) allowing you to reduce the amount of garbage generated in
 a custom formatter... 2) Lets you know which arguments have been used in the message allowing you to implement extra
 logic to handle the unused ones 3) Lets you plug custom formatters for argument types. (you can get better
 performance and more flexibility) 4) Processing arguments that are arrays is sligtly faster than the slf4j formatter.

 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Slf4jMessageFormatter -->
  <!-- start interface org.spf4j.base.Slf4jMessageFormatter.ErrorHandler -->
  <interface name="Slf4jMessageFormatter.ErrorHandler"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="accept"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
      <param name="sbuf" type="java.lang.Appendable"/>
      <param name="t" type="java.lang.Throwable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
  </interface>
  <!-- end interface org.spf4j.base.Slf4jMessageFormatter.ErrorHandler -->
  <!-- start class org.spf4j.base.Throwables -->
  <class name="Throwables" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="isRetryable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Exception"/>
      <doc>
      <![CDATA[figure out if a Exception is retry-able or not.
 If while executing a operation a exception is returned, that exception is retryable if retrying the operation
 can potentially succeed.
 @param value
 @return]]>
      </doc>
    </method>
    <method name="getIsRetryablePredicate" return="java.util.function.Predicate"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setIsRetryablePredicate"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="isRetryablePredicate" type="java.util.function.Predicate"/>
    </method>
    <method name="getNrSuppressedExceptions" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="getNrRecursiveSuppressedExceptions" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="removeOldestSuppressedRecursive" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="removeOldestSuppressed" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="chain" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="newRootCause" type="java.lang.Throwable"/>
      <doc>
      <![CDATA[This method will clone the exception t and will set a new root cause.

 @param <T>
 @param t
 @param newRootCause
 @return]]>
      </doc>
    </method>
    <method name="chain" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="newRootCause" type="java.lang.Throwable"/>
      <param name="maxChained" type="int"/>
    </method>
    <method name="trimCausalChain"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="maxSize" type="int"/>
    </method>
    <method name="suppress" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="suppressed" type="java.lang.Throwable"/>
      <doc>
      <![CDATA[Functionality similar for java 1.7 Throwable.addSuppressed. 2 extra things happen:

 1) limit to nr of exceptions suppressed. 2) Suppression does not mutate Exception, it clones it.

 @param <T>
 @param t
 @param suppressed
 @return]]>
      </doc>
    </method>
    <method name="suppress" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="suppressed" type="java.lang.Throwable"/>
      <param name="maxSuppressed" type="int"/>
    </method>
    <method name="getSuppressed" return="java.lang.Throwable[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <doc>
      <![CDATA[Utility to get suppressed exceptions.

 In java 1.7 it will return t.getSuppressed() + in case it is Iterable<Throwable> any other linked exceptions (see
 SQLException)

 java 1.6 behavior is deprecated.

 @param t
 @return]]>
      </doc>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="element" type="java.lang.StackTraceElement"/>
      <param name="previous" type="java.lang.StackTraceElement"/>
      <param name="to" type="java.lang.Appendable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <param name="abbreviatedTraceElement" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <param name="abbreviatedTraceElement" type="boolean"/>
    </method>
    <method name="toStringBuilder" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
    </method>
    <method name="toStringBuilder" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <param name="abbreviatedTraceElement" type="boolean"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="to" type="java.io.PrintStream"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="to" type="java.io.PrintStream"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <param name="abbreviatedTraceElement" type="boolean"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="to" type="java.lang.Appendable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="to" type="java.lang.Appendable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <param name="abbreviatedTraceElement" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeMessageString"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.lang.Appendable"/>
      <param name="t" type="java.lang.Throwable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trace" type="java.lang.StackTraceElement[]"/>
      <param name="to" type="java.lang.Appendable"/>
      <param name="detail" type="org.spf4j.base.Throwables.PackageDetail"/>
      <param name="abbreviatedTraceElement" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="commonFrames" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trace" type="java.lang.StackTraceElement[]"/>
      <param name="enclosingTrace" type="java.lang.StackTraceElement[]"/>
    </method>
    <method name="isNonRecoverable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <doc>
      <![CDATA[Is this Throwable a JVM non-recoverable exception. (Oom, VMError, etc...)
 @param t
 @return]]>
      </doc>
    </method>
    <method name="containsNonRecoverable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <doc>
      <![CDATA[Does this Throwable contain a JVM non-recoverable exception. (Oom, VMError, etc...)
 @param t
 @return]]>
      </doc>
    </method>
    <method name="contains" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="predicate" type="java.util.function.Predicate"/>
      <doc>
      <![CDATA[checks in the throwable + children (both causal and suppressed) contain a throwable that
 respects the Predicate.
 @param t the throwable
 @param predicate the predicate
 @return true if a Throwable matching the predicate is found.]]>
      </doc>
    </method>
    <method name="first" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="clasz" type="java.lang.Class"/>
      <doc>
      <![CDATA[return first Exception in the causal chain Assignable to clasz.
 @param <T>
 @param t
 @param clasz
 @return]]>
      </doc>
    </method>
    <method name="first" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="predicate" type="java.util.function.Predicate"/>
      <doc>
      <![CDATA[Returns the first Throwable that matches the predicate in the causal and suppressed chain.
 @param t the Throwable
 @param predicate the Predicate
 @return the Throwable the first matches the predicate or null is none matches.]]>
      </doc>
    </method>
    <method name="firstCause" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="throwable" type="java.lang.Throwable"/>
      <param name="predicate" type="java.util.function.Predicate"/>
      <doc>
      <![CDATA[Returns first Throwable in the causality chain that is matching the provided predicate.
 @param throwable the Throwable to go through.
 @param predicate the predicate to apply
 @return the first Throwable from the chain that the predicate matches.]]>
      </doc>
    </method>
    <method name="getNonRecoverablePredicate" return="java.util.function.Predicate"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setNonRecoverablePredicate"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="predicate" type="java.util.function.Predicate"/>
      <doc>
      <![CDATA[Overwrite the default non-recoverable predicate.
 @param predicate]]>
      </doc>
    </method>
    <method name="writeAbreviatedClassName"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="className" type="java.lang.String"/>
      <param name="writeTo" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="throwException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ex" type="java.lang.Exception"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="InterruptedException" type="java.lang.InterruptedException"/>
      <exception name="ExecutionException" type="java.util.concurrent.ExecutionException"/>
      <exception name="TimeoutException" type="java.util.concurrent.TimeoutException"/>
    </method>
    <field name="SUPPRESSED_CAPTION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Caption for labeling suppressed exception stack traces]]>
      </doc>
    </field>
    <field name="CAUSE_CAPTION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Caption for labeling causative exception stack traces]]>
      </doc>
    </field>
    <field name="MAX_THROWABLE_CHAIN" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[utility class for throwables.

 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Throwables -->
  <!-- start class org.spf4j.base.Throwables.PackageDetail -->
  <class name="Throwables.PackageDetail" extends="java.lang.Enum"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="org.spf4j.base.Throwables.PackageDetail[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="org.spf4j.base.Throwables.PackageDetail"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <field name="NONE" type="org.spf4j.base.Throwables.PackageDetail"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[No jar info or version info.]]>
      </doc>
    </field>
    <field name="SHORT" type="org.spf4j.base.Throwables.PackageDetail"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[jar file name + manifest version.]]>
      </doc>
    </field>
    <field name="LONG" type="org.spf4j.base.Throwables.PackageDetail"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[complete jar path + manifest version.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[enum describing the PackageDetail level to be logged in the stack trace.]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.Throwables.PackageDetail -->
  <!-- start class org.spf4j.base.Throwables.TrimmedException -->
  <class name="Throwables.TrimmedException" extends="java.lang.Exception"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="TrimmedException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="fillInStackTrace" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class org.spf4j.base.Throwables.TrimmedException -->
  <!-- start class org.spf4j.base.TLScratch -->
  <class name="TLScratch" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getBytesTmp" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="size" type="int"/>
      <doc>
      <![CDATA[returns a thread local byte array of at least the size requested. use only for temporary purpose. This method needs
 to be carefully used!

 @param size - the minimum size of the temporary buffer requested.
 @return - the temporary buffer.]]>
      </doc>
    </method>
    <method name="getCharsTmp" return="char[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="size" type="int"/>
      <doc>
      <![CDATA[returns a thread local char array of at least the requested size. Use only for temporary purpose.

 @param size - the minimum size of the temporary buffer requested.
 @return - the temporary buffer.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.TLScratch -->
  <!-- start class org.spf4j.base.UnicodeUnescaper -->
  <class name="UnicodeUnescaper" extends="org.spf4j.base.CharSequenceTranslator"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="UnicodeUnescaper"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="translate" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="input" type="java.lang.CharSequence"/>
      <param name="index" type="int"/>
      <param name="out" type="java.io.Writer"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[{@inheritDoc}]]>
      </doc>
    </method>
  </class>
  <!-- end class org.spf4j.base.UnicodeUnescaper -->
  <!-- start class org.spf4j.base.XCollectors -->
  <class name="XCollectors" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="last" return="java.util.stream.Collector"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="limit" type="int"/>
    </method>
    <method name="last" return="java.util.stream.Collector"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="limit" type="int"/>
      <param name="addIfLimited" type="java.lang.Object"/>
    </method>
    <method name="filtering" return="java.util.stream.Collector"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="predicate" type="java.util.function.Predicate"/>
      <param name="downstream" type="java.util.stream.Collector"/>
      <doc>
      <![CDATA[THis is a backport from JDK9.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.base.XCollectors -->
</package>
<package name="org.slf4j.impl">
  <!-- start class org.slf4j.impl.StaticLoggerBinder -->
  <class name="StaticLoggerBinder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.slf4j.spi.LoggerFactoryBinder"/>
    <method name="getSingleton" return="org.slf4j.impl.StaticLoggerBinder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the singleton of this class.

 @return the StaticLoggerBinder singleton]]>
      </doc>
    </method>
    <method name="getLoggerFactory" return="org.slf4j.ILoggerFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLoggerFactoryClassStr" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="REQUESTED_API_VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Declare the version of the SLF4J API this implementation is compiled against.
 The value of this field is modified with each major release.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.slf4j.impl.StaticLoggerBinder -->
  <!-- start class org.slf4j.impl.StaticMarkerBinder -->
  <class name="StaticMarkerBinder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.slf4j.spi.MarkerFactoryBinder"/>
    <method name="getSingleton" return="org.slf4j.impl.StaticMarkerBinder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the singleton of this class.

 @return the StaticMarkerBinder singleton
 @since 1.7.14]]>
      </doc>
    </method>
    <method name="getMarkerFactory" return="org.slf4j.IMarkerFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Currently this method always returns an instance of {@link BasicMarkerFactory}.]]>
      </doc>
    </method>
    <method name="getMarkerFactoryClassStr" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Currently, this method returns the class name of {@link BasicMarkerFactory}.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="SINGLETON" type="org.slf4j.impl.StaticMarkerBinder"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The unique instance of this class.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.slf4j.impl.StaticMarkerBinder -->
  <!-- start class org.slf4j.impl.StaticMDCBinder -->
  <class name="StaticMDCBinder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getSingleton" return="org.slf4j.impl.StaticMDCBinder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the singleton of this class.

 @return the StaticMDCBinder singleton
 @since 1.7.14]]>
      </doc>
    </method>
    <method name="getMDCA" return="org.slf4j.spi.MDCAdapter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Currently this method always returns an instance of {@link StaticMDCBinder}.]]>
      </doc>
    </method>
    <method name="getMDCAdapterClassStr" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="SINGLETON" type="org.slf4j.impl.StaticMDCBinder"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The unique instance of this class.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This implementation is bound to {@link NOPMDCAdapter}.]]>
    </doc>
  </class>
  <!-- end class org.slf4j.impl.StaticMDCBinder -->
</package>
<package name="org.spf4j.io">
  <!-- start class org.spf4j.io.ByteArrayBuilder -->
  <class name="ByteArrayBuilder" extends="java.io.OutputStream"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ByteArrayBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ByteArrayBuilder" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ByteArrayBuilder" type="int, org.spf4j.recyclable.SizedRecyclingSupplier"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new byte array output stream, with a buffer capacity of
 the specified size, in bytes.

 @param   size   the initial size.
 @exception  IllegalArgumentException if size is negative.]]>
      </doc>
    </constructor>
    <method name="getBuffer" return="byte[]"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="int"/>
      <doc>
      <![CDATA[Writes the specified byte to this byte array output stream.

 @param   b   the byte to be written.]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <param name="off" type="int"/>
      <param name="len" type="int"/>
      <doc>
      <![CDATA[Writes <code>len</code> bytes from the specified byte array
 starting at offset <code>off</code> to this byte array output stream.

 @param   b     the data.
 @param   off   the start offset in the data.
 @param   len   the number of bytes to write.]]>
      </doc>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes the complete contents of this byte array output stream to
 the specified output stream argument, as if by calling the output
 stream's write method using <code>out.write(buf, 0, count)</code>.

 @param      out   the output stream to which to write the data.
 @exception  IOException  if an I/O error occurs.]]>
      </doc>
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Resets the <code>count</code> field of this byte array output
 stream to zero, so that all currently accumulated output in the
 output stream is discarded. The output stream can be used again,
 reusing the already allocated buffer space.

 @see     java.io.ByteArrayInputStream#count]]>
      </doc>
    </method>
    <method name="toByteArray" return="byte[]"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a newly allocated byte array. Its size is the current
 size of this output stream and the valid contents of the buffer
 have been copied into it.

 @return  the current contents of this output stream, as a byte array.
 @see     java.io.ByteArrayOutputStream#size()]]>
      </doc>
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current size of the buffer.

 @return  the value of the <code>count</code> field, which is the number
          of valid bytes in this output stream.
 @see     java.io.ByteArrayOutputStream#count]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Converts the buffer's contents into a string decoding bytes using the
 platform's default character set. The length of the new <tt>String</tt>
 is a function of the character set, and hence may not be equal to the
 size of the buffer.

 <p> This method always replaces malformed-input and unmappable-character
 sequences with the default replacement string for the platform's
 default character set. The {@linkplain java.nio.charset.CharsetDecoder}
 class should be used when more control over the decoding process is
 required.

 @return String decoded from the buffer's contents.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="charset" type="java.nio.charset.Charset"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Closing a <tt>ByteArrayOutputStream</tt> has no effect. The methods in
 this class can be called after the stream has been closed without
 generating an <tt>IOException</tt>.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Utility class to avoid replicating byte arrays for no good reason.
 @author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.io.ByteArrayBuilder -->
  <!-- start class org.spf4j.io.ConfigurableAppenderSupplier -->
  <class name="ConfigurableAppenderSupplier" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.io.ObjectAppenderSupplier"/>
    <constructor name="ConfigurableAppenderSupplier"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="ConfigurableAppenderSupplier" type="boolean, java.util.function.Predicate, org.spf4j.io.ObjectAppender[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getAppenderType" return="java.lang.Class"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="appender" type="org.spf4j.io.ObjectAppender"/>
    </method>
    <method name="register" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.Class"/>
      <param name="appenders" type="org.spf4j.io.ObjectAppender[]"/>
    </method>
    <method name="replace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.Class"/>
      <param name="replace" type="java.util.function.Function"/>
    </method>
    <method name="register"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.Class"/>
      <param name="appender" type="org.spf4j.io.ObjectAppender"/>
    </method>
    <method name="tryRegister" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.Class"/>
      <param name="appender" type="org.spf4j.io.ObjectAppender"/>
    </method>
    <method name="register"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.Class"/>
      <param name="contentType" type="javax.activation.MimeType"/>
      <param name="appender" type="org.spf4j.io.ObjectAppender"/>
    </method>
    <method name="tryRegister" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.Class"/>
      <param name="contentType" type="javax.activation.MimeType"/>
      <param name="appender" type="org.spf4j.io.ObjectAppender"/>
    </method>
    <method name="unregister" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.Class"/>
    </method>
    <method name="get" return="org.spf4j.io.ObjectAppender"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </class>
  <!-- end class org.spf4j.io.ConfigurableAppenderSupplier -->
  <!-- start class org.spf4j.io.MimeTypes -->
  <class name="MimeTypes" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="PLAIN_TEXT" type="javax.activation.MimeType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="APPLICATION_JSON" type="javax.activation.MimeType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="APPLICATION_OCTET_STREAM" type="javax.activation.MimeType"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Some standard mime types.
 @author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.io.MimeTypes -->
  <!-- start interface org.spf4j.io.ObjectAppender -->
  <interface name="ObjectAppender"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.function.BiConsumer"/>
    <method name="getAppendedType" return="javax.activation.MimeType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[the MimeType of the format used to write the Object.
 @return]]>
      </doc>
    </method>
    <method name="append"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
      <param name="appendTo" type="java.lang.Appendable"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Write an Object to a char stream.
 @param object
 @param appendTo
 @throws IOException]]>
      </doc>
    </method>
    <method name="accept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
      <param name="appendTo" type="java.lang.Appendable"/>
    </method>
    <field name="TOSTRING_APPENDER" type="org.spf4j.io.ObjectAppender"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A simple Object appender that invokes the toString method of the object and writes the object out.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[@author zoly
 @param <T> - type of object to append.]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.io.ObjectAppender -->
  <!-- start interface org.spf4j.io.ObjectAppenderSupplier -->
  <interface name="ObjectAppenderSupplier"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.util.function.Function"/>
    <implements name="org.spf4j.reflect.ByTypeSupplier"/>
    <method name="apply" return="org.spf4j.io.ObjectAppender"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clasz" type="java.lang.Class"/>
    </method>
    <field name="TO_STRINGER" type="org.spf4j.io.ConfigurableAppenderSupplier"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.io.ObjectAppenderSupplier -->
</package>
<package name="org.spf4j.recyclable">
  <!-- start interface org.spf4j.recyclable.SizedRecyclingSupplier -->
  <interface name="SizedRecyclingSupplier"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="get" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="size" type="int"/>
    </method>
    <method name="recycle"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[@author zoly]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.recyclable.SizedRecyclingSupplier -->
  <!-- start interface org.spf4j.recyclable.SizedRecyclingSupplier.Factory -->
  <interface name="SizedRecyclingSupplier.Factory"    abstract="true"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="create" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="size" type="int"/>
    </method>
    <method name="size" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
    </method>
  </interface>
  <!-- end interface org.spf4j.recyclable.SizedRecyclingSupplier.Factory -->
</package>
<package name="org.spf4j.ds">
  <!-- start class org.spf4j.ds.Graphs -->
  <class name="Graphs" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="clone" return="com.google.common.graph.MutableGraph"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="graph" type="com.google.common.graph.MutableGraph"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.ds.Graphs -->
  <!-- start class org.spf4j.ds.IdentityHashSet -->
  <class name="IdentityHashSet" extends="gnu.trove.set.hash.THashSet"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="IdentityHashSet"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="IdentityHashSet" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="IdentityHashSet" type="int, float"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="IdentityHashSet" type="java.util.Collection"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="hash" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="notnull" type="java.lang.Object"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="notnull" type="java.lang.Object"/>
      <param name="two" type="java.lang.Object"/>
    </method>
  </class>
  <!-- end class org.spf4j.ds.IdentityHashSet -->
</package>
<package name="org.spf4j.reflect">
  <!-- start interface org.spf4j.reflect.ByTypeSupplier -->
  <interface name="ByTypeSupplier"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="get" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.reflect.ByTypeSupplier -->
  <!-- start class org.spf4j.reflect.CachingTypeMapWrapper -->
  <class name="CachingTypeMapWrapper" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.reflect.TypeMap"/>
    <constructor name="CachingTypeMapWrapper" type="com.google.common.cache.CacheBuilder, org.spf4j.reflect.TypeMap"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="CachingTypeMapWrapper" type="org.spf4j.reflect.TypeMap"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getAll" return="java.util.Set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.reflect.Type"/>
    </method>
    <method name="putIfNotPresent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
      <param name="appender" type="java.lang.Object"/>
    </method>
    <method name="remove" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
    </method>
    <method name="getExact" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.reflect.Type"/>
    </method>
    <method name="replace"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.reflect.Type"/>
      <param name="f" type="java.util.function.Function"/>
    </method>
    <method name="clearCache"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.reflect.CachingTypeMapWrapper -->
  <!-- start class org.spf4j.reflect.GraphTypeMap -->
  <class name="GraphTypeMap" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.reflect.TypeMap"/>
    <constructor name="GraphTypeMap"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="GraphTypeMap" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getAll" return="java.util.Set"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.reflect.Type"/>
    </method>
    <method name="putIfNotPresent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
      <param name="appender" type="java.lang.Object"/>
    </method>
    <method name="remove" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getExact" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.reflect.Type"/>
    </method>
    <doc>
    <![CDATA[@author Zoltan Farkas]]>
    </doc>
  </class>
  <!-- end class org.spf4j.reflect.GraphTypeMap -->
  <!-- start interface org.spf4j.reflect.TypeMap -->
  <interface name="TypeMap"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="org.spf4j.reflect.ByTypeSupplier"/>
    <method name="getAll" return="java.util.Set"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.reflect.Type"/>
      <doc>
      <![CDATA[Get all Objects associated to all unrelated compatible types.

 for example we habe Object O of type T a subtype of T1 and T2.
 if this typemap contains Objects mapped to T1 and T2, those 2 objects
 will be returned if T1 and T2 are not related (subtypes of each other)
 if T1 extends T2 the obeject mapped to the most specific type is returned.

 @param t
 @return]]>
      </doc>
    </method>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.reflect.Type"/>
      <doc>
      <![CDATA[get the object associated to a compatible type, only if there is only one.
 @param t
 @return]]>
      </doc>
    </method>
    <method name="getExact" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.reflect.Type"/>
      <doc>
      <![CDATA[Get the the Object associated to type.
 @param t
 @return]]>
      </doc>
    </method>
    <method name="putIfNotPresent" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
      <param name="object" type="java.lang.Object"/>
      <doc>
      <![CDATA[Associate object to type if no existing association present.
 @param type
 @param object
 @return]]>
      </doc>
    </method>
    <method name="safePut" return="org.spf4j.reflect.TypeMap"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
      <param name="object" type="java.lang.Object"/>
      <doc>
      <![CDATA[Associate object with type. if there is an existing association a exception will be thrown.
 @param type
 @param object]]>
      </doc>
    </method>
    <method name="remove" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
      <doc>
      <![CDATA[remove type association.
 @param type
 @return]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Type to Object map.
 association is not 1 - 1. if we have  type1 -> object that if type2 is subtype of type1, also type2 -> object
 this is useful for resolving: ITC_INHERITANCE_TYPE_CHECKING

 @author Zoltan Farkas]]>
    </doc>
  </interface>
  <!-- end interface org.spf4j.reflect.TypeMap -->
</package>

</api>
